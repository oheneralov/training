<template>
  <div class="app-container">
    <h2>CSV + Text WebSocket Uploader</h2>

    <label for="text">Text input</label>
    <textarea id="text" v-model="text" rows="6" placeholder="Enter text here..."></textarea>

    <div class="file-row">
      <button @click="triggerFilePick">Add CSV file</button>
      <input ref="fileInput" type="file" accept=".csv,text/csv" @change="onFileChange" style="display: none" />
      <span class="filename" v-if="fileName">{{ fileName }}</span>
      <span class="nofile" v-else>No file selected</span>
    </div>

    <div class="controls">
      <button @click="handleSubmit">Submit</button>
    </div>

    <div class="status">
      <strong>WebSocket status:</strong> <span>{{ connected ? 'Connected' : 'Disconnected' }}</span>
    </div>

    <div class="log">
      <h3>Messages / Log</h3>
      <div class="log-lines">
        <div v-for="(m, i) in logs" :key="i" class="log-line">{{ m }}</div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, onUnmounted, type Ref } from 'vue'
import {
  connected,
  connectSocket,
  disconnectSocket,
  sendMessageToServer
} from './utils/websocket'

// --- reactive state ---
const text: Ref<string> = ref('')
const fileInput: Ref<HTMLInputElement | null> = ref(null)
const fileName: Ref<string> = ref('')
let selectedFile: File | null = null

const logs: Ref<string[]> = ref([])

// --- helper logging ---
function addLog(msg: string): void {
  const time = new Date().toLocaleTimeString()
  logs.value.unshift(`[${time}] ${msg}`)
  // keep logs reasonably short
  if (logs.value.length > 200) logs.value.pop()
}

// --- file helpers ---
function triggerFilePick(): void {
  fileInput.value && fileInput.value.click()
}

function onFileChange(e: Event): void {
  const target = e.target as HTMLInputElement
  const f = target.files && target.files[0]
  if (!f) return
  selectedFile = f
  fileName.value = f.name
  addLog(`Selected file: ${f.name} (${f.size} bytes)`)
}

async function readSelectedFileText(): Promise<string> {
  if (!selectedFile) return ''
  // modern File API supports text() returning a promise
  try {
    const txt = await selectedFile.text()
    return txt
  } catch (err) {
    addLog('Failed to read file: ' + err)
    return ''
  }
}



// --- submit handler ---
async function handleSubmit(): Promise<void> {
  // read file if present
  const fileContent = await readSelectedFileText()

  // concatenation: textarea text + 'delimiter' + file content
  const concatenated = `${text.value}delimiter${fileContent}`

  // send via websockets
  const ok = sendMessageToServer(concatenated, addLog)
  if (!ok) {
    addLog('Message not sent. Are you connected?')
  }
}

// --- lifecycle hooks ---
onMounted(() => {
  connectSocket(addLog)
})

onUnmounted(() => {
  disconnectSocket(addLog)
})
</script>

<style scoped>
.app-container {
  max-width: 700px;
  margin: 20px auto;
  padding: 16px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  font-family: system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
}
textarea {
  width: 100%;
  box-sizing: border-box;
  padding: 8px;
  font-size: 14px;
  margin-bottom: 12px;
}
.file-row {
  display: flex;
  gap: 12px;
  align-items: center;
  margin-bottom: 12px;
}
.controls {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}
.status {
  margin-bottom: 12px;
}
.log {
  background: #fafafa;
  border: 1px solid #eee;
  padding: 8px;
  border-radius: 6px;
}
.log-lines {
  max-height: 220px;
  overflow: auto;
}
.log-line {
  font-family: monospace;
  font-size: 12px;
  padding: 2px 0;
}
.filename {
  font-weight: 600;
}
.nofile {
  color: #888;
}
</style>
