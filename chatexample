// WebSocket utility functions
import { ref } from 'vue'

// WebSocket state
let socket = null
const connected = ref(false)

// --- Helper functions ---
function getQueryParameters() {
  const urlParams = new URLSearchParams(window.location.search)
  return {
    token: urlParams.get('token'),
    apikey: urlParams.get('apikey')
  }
}

function buildWebSocketUrl() {
  const baseUrl = import.meta.env.VITE_WEBSOCKET_URL || 'ws://localhost:8000/ws'
  const params = getQueryParameters()
  
  // Only add query parameters if they exist
  const queryParams = new URLSearchParams()
  if (params.token) queryParams.append('token', params.token)
  if (params.apikey) queryParams.append('apikey', params.apikey)
  
  const queryString = queryParams.toString()
  return queryString ? `${baseUrl}?${queryString}` : baseUrl
}

// --- WebSocket management functions ---
function initConnection(url = null, addLog) {
  if (socket && socket.readyState === WebSocket.OPEN) {
    addLog('WebSocket already open')
    return
  }

  const wsUrl = url || buildWebSocketUrl()
  socket = new WebSocket(wsUrl)

  socket.addEventListener('open', () => {
    connected.value = true
    addLog(`Connected to ${wsUrl}`)
  })

  socket.addEventListener('message', (ev) => {
    addLog('Received: ' + ev.data)
  })

  socket.addEventListener('close', (ev) => {
    connected.value = false
    addLog(`Socket closed (code=${ev.code})`)
  })

  socket.addEventListener('error', () => {
    addLog('Socket error')
  })
}

function connectSocket(addLog) {
  try {
    initConnection(null, addLog)
  } catch (err) {
    addLog('Connect failed: ' + err)
  }
}

function disconnectSocket(addLog) {
  if (!socket) return
  try {
    socket.close()
    socket = null
    connected.value = false
    addLog('Socket closed by client')
  } catch (err) {
    addLog('Error while closing socket: ' + err)
  }
}

function sendWSMessage(payload, addLog) {
  // ensure payload is string
  const msg = typeof payload === 'string' ? payload : JSON.stringify(payload)
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    addLog('Cannot send: socket is not open')
    return false
  }

  try {
    socket.send(msg)
    addLog('Sent: ' + (msg.length > 200 ? msg.slice(0, 200) + '... (truncated)' : msg))
    return true
  } catch (err) {
    addLog('Send failed: ' + err)
    return false
  }
}

// convenience wrapper
function sendMessageToServer(message, addLog) {
  return sendWSMessage(message, addLog)
}

export {
  connected,
  initConnection,
  connectSocket,
  disconnectSocket,
  sendWSMessage,
  sendMessageToServer
}
